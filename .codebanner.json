{
    "folders": [
        "test",
        "scrutiny"
    ],
    "include_patterns": [
        "*.py"
    ],
    "exclude_patterns": [
        "__init__.py"
    ],
    "license": "MIT - See LICENSE file",
    "project": "Scrutiny Debugger",
    "repo": "github.com/scrutinydebugger/scrutiny-python",
    "copyright_owner": "Scrutiny Debugger",
    "copyright_start_date": "2021",
    "files": {
        "scrutiny/__main__.py": {
            "docstring": "Entry point of the python module. Launch the CLI.",
            "add_shebang": true
        },
        "scrutiny/cli/cli.py": {
            "docstring": "Provide the Command Line Interface.\nAllow to launch specific functionality by invoking Scrutiny with command line arguments."
        },
        "scrutiny/cli/commands/base_command.py": {
            "docstring": "Abstract class for all commands. Used to automatically find all available commands through reflection"
        },
        "scrutiny/cli/commands/elf2varmap.py": {
            "docstring": "CLI Command to read and .elf file and generate a Scrutiny VarMap file that will be included into the Firmware Description File."
        },
        "scrutiny/cli/commands/get_firmware_id.py": {
            "docstring": "CLI Command to generate a unique ID from a .elf file and optionally writes that ID to the file by a search and replace approach so that the device can broadcast its ID once flashed by this firmware."
        },
        "scrutiny/cli/commands/install_sfd.py": {
            "docstring": "CLI Command to copy a Scrutiny Firmware Description file into the scrutiny storage so it can be automatically loaded by the server upon connection with a device"
        },
        "scrutiny/cli/commands/launch_server.py": {
            "docstring": "CLI Command to launch the scrutiny server"
        },
        "scrutiny/cli/commands/make_sfd.py": {
            "docstring": "CLI Command to build and validate a Scrutiny Firmware Description file"
        },
        "scrutiny/cli/commands/make_metadata.py": {
            "docstring": "CLI Command to generate the metadata file that will be included in a Scrutiny Firmware Description file"
        },
        "scrutiny/cli/commands/runtest.py": {
            "docstring": "CLI Command to launch the python unit tests"
        },
        "scrutiny/cli/commands/uninstall_sfd.py": {
            "docstring": "CLI Command to remove a Scrutiny Firmware Description file from the scrutiny storage"
        },
        "scrutiny/core/firmware_id.py": {
            "docstring": "Holds the defaut firmware ID. Used for detection of untagged firmware"
        },
        "scrutiny/core/firmware_description.py": {
            "docstring": "Contains the class that represent a Scrutiny Firmware Description file. \nA .sfd is a file that holds all the data related to a firmware and is identified by a unique ID."
        },
        "scrutiny/core/sfd_storage.py": {
            "docstring": "Manipulate the Scrutiny storage for .sfd files"
        },
        "scrutiny/core/variable.py": {
            "docstring": "Variable class represent a variable, will be included in VarMap"
        },
        "scrutiny/core/varmap.py": {
            "docstring": "A VarMap list all variables in a firmware file along with their types, address, bit offset, etc\n. I is a simplified version of the DWARF debugging symbols."
        },
        "scrutiny/core/bintools/demangler.py": {
            "docstring": "Converts mangled linkage names to readable symbols names"
        },
        "scrutiny/core/bintools/elf_dwarf_var_extractor.py": {
            "docstring": "Reads a .elf file, extract the DWARF debugging symbols and make a VarMap object out of it."
        },
        "scrutiny/core/bintools/get_var_memrange.py": {
            "docstring": "Simple tool to get the memory ranges of the .elf sections that contains the variables. \nUsed to generate Memdumps for unit teting"
        },
        "scrutiny/server/server.py": {
            "docstring": "The scrutiny server. Talk with multiple clients through a websocket API and communicate with a device through a given communication link (Serial, UDP, etc)\n Allow the clients to interract with the device"
        },
        "scrutiny/server/api/API.py": {
            "docstring": "Manages the websocket API to talk with the multiple clients. Can be a GUI client or a CLI client"
        },
        "scrutiny/server/api/dummy_client_handler.py": {
            "docstring": "Stubbed API connector to make API requests in unittests without relying on websockets"
        },
        "scrutiny/server/api/value_streamer.py": {
            "docstring": "Take the data from the Datastore and sends it to all clients by respecting bitrate limits and avoiding duplicate date."
        },
        "scrutiny/server/api/websocket_client_handler.py": {
            "docstring": "Manage the API websocket connections .\n This class has a list of all clients and identifiy them by a unique ID"
        },
        "scrutiny/server/datastore/datastore.py": {
            "docstring": "This class is a container that will hold all the data read from a device (e.g. the variables).\n It's the meeting point of the API (with ValueStreamer) and the DeviceHandler"
        },
        "scrutiny/server/datastore/datastore_entry.py": {
            "docstring": "A variable entry in the datastore"
        },
        "scrutiny/server/device/device_handler.py": {
            "docstring": "Manage the communication with the device at high level.\n Try to establish a connection, once it succeed, reads the device configuration. \n Will keep the communication ongoing and will request for memory dump based on the Datastore state"
        },
        "scrutiny/server/device/device_info.py": {
            "docstring": "All the information that can be extracted from the device through the Scrutiny protocol"
        },
        "scrutiny/server/device/emulated_device.py": {
            "docstring": "Emulate a device that is compiled with the C++ lib.\nFor unit testing purpose"
        },
        "scrutiny/server/device/request_dispatcher.py": {
            "docstring": "Use a PriorityQueue to dispatch Request to the device. Associate each request with its callback"
        },
        "scrutiny/server/device/links/dummy_link.py": {
            "docstring": "Fake communication link with a device. Used by the EmulatedDevice for unit test purpose"
        },
        "scrutiny/server/device/links/udp_link.py": {
            "docstring": "Connects the CommHandler to a device through UDP"
        },
        "scrutiny/server/device/request_generator/device_searcher.py": {
            "docstring": "Once enbled, generates DISCOVER requests to find a device at the other end of the communication link."
        },
        "scrutiny/server/device/request_generator/heartbeat_generator.py": {
            "docstring": "Once enabled, generate HEARTBEAT request periodically to keep a connection alive with a device."
        },
        "scrutiny/server/device/request_generator/info_poller.py": {
            "docstring": "Once enabled, successively poll all pollable data from a device through the Scrutiny protocol. Also call callbacks method when specific data is read e.g. Protocol version, buffer size, etc"
        },
        "scrutiny/server/device/request_generator/session_initializer.py": {
            "docstring": "Once enabled, try to establish a working session with a device."
        },
        "scrutiny/server/protocol/comm_handler.py": {
            "docstring": "The CommHandler task is to convert Requests and Response from or to a stream of bytes.\nThis class manage send requests, wait for response, indicates if a response timeout occured and decodes bytes. \nIt manages the low level part of the communication protocol with the device"
        },
        "scrutiny/server/protocol/crc32.py": {
            "docstring": "Compute a CRC32 for protocol validation"
        },
        "scrutiny/server/protocol/datalog.py": {
            "docstring": "Defines a datalogging configuration that can be read or write from the device."
        },
        "scrutiny/server/protocol/exceptions.py": {
            "docstring": "Some exceptions specific to the protocol"
        },
        "scrutiny/server/protocol/protocol.py": {
            "docstring": "Allow encoding and decoding of data based on the Scrutiny Protocol"
        },
        "scrutiny/server/protocol/request.py": {
            "docstring": "Represent a request sent by the server and received by the device"
        },
        "scrutiny/server/protocol/response.py": {
            "docstring": "Represent a response sent by the device and received by the server"
        },
        "scrutiny/server/protocol/commands/base_command.py": {
            "docstring": "Abstract class for all Scrutiny protocol commands "
        },
        "scrutiny/server/protocol/commands/comm_control.py": {
            "docstring": "Scrutiny protocol command to manipulate the communication"
        },
        "scrutiny/server/protocol/commands/datalog_control.py": {
            "docstring": "Scrutiny protocol command to trigger and read data logs."
        },
        "scrutiny/server/protocol/commands/dummy_command.py": {
            "docstring": "Fake Scrutiny protocol command for unit test purpose"
        },
        "scrutiny/server/protocol/commands/get_info.py": {
            "docstring": "Scrutiny protocol command to read some specific configuration in the device"
        },
        "scrutiny/server/protocol/commands/memory_control.py": {
            "docstring": "Scrutiny protocol command to read and wrie memory"
        },
        "scrutiny/server/protocol/commands/user_command.py": {
            "docstring": "Scrutiny protocol command to launch user defined functions in the device. \n It's a way of leveraging the existing communication protocol for other purpose than Scrutiny debugging."
        },
        "test/cli/test_cli.py": {
            "docstring": "Test the Command Line Interface"
        },
        "test/cli/test_elf_dwarf_var_extractor.py": {
            "docstring": "Test the extraction of dwarf symbols from a .elf file"
        },
        "test/cli/test_makevarmap_Linux_LE_x64_Gcc_8_3_0.py": {
            "docstring": "Test that we can make a valid VarMap out of a known binary."
        },
        "test/server/test_api.py": {
            "docstring": "Test the client API through a fake handler"
        },
        "test/server/test_datastore.py": {
            "docstring": "Test the Datastore behaviour"
        },
        "test/server/test_device_handler.py": {
            "docstring": "Test the DeviceHandler that manage the communication with the device at high level."
        },
        "test/server/test_dummy_connection.py": {
            "docstring": "Test the FakeConnection used for unit tests"
        },
        "test/server/test_value_streamer.py": {
            "docstring": "Test the ValueStreamer object that reads the datastore and broadcast variables to all clients."
        },
        "test/server/protocol/test_comm_handler.py": {
            "docstring": "Test the CommHandler that manage the communication with the deviec a lower level.\n Converts btyes to Request/Response and flag timeouts"
        },
        "test/server/protocol/test_crc.py": {
            "docstring": "Make sure the CRC32 is working for the protocol"
        },
        "test/server/protocol/test_protocol_v1_0.py": {
            "docstring": "Test the Scrutiny Protocol.\n Validate encoding and decoding of each command."
        },
        "test/server/protocol/test_request_response.py": {
            "docstring": "Test for the protocol Request and Response class.\n Ensure that byte encoding/decoding works properly"
        },
        "test/server/test_request_dispatcher.py": {
            "docstring": "Test the request dispatcher.\nPriorities, throttling, size limits."
        },
        "test/server/test_server_tools.py": {
            "docstring": "Test various tools for the Python server application"
        },
        "scrutiny/server/tools/throttler.py": {
            "docstring": "Allow to do some throttling to reduce the transmission speed"
        },
        "scrutiny/server/tools/timer.py": {
            "docstring": "Minimalist class to make measurement of time easier."
        },
        "scrutiny/core/memory_content.py": {
            "docstring": "Provide a tool to manipulate non contiguous chunks of bytes with their addresses.\nRepresent a partial memory snapshot"
        },
        "test/core/test_memory_content.py": {
            "docstring": "Test the MemoryContent class functionalities. Make sure it correctly wirtes and read and also agglomerate contiguous clusters"
        },
        "scrutiny/core/typehints.py": {
            "docstring": "Contains some definition for type hints that are used across all project"
        },
        "scrutiny/server/api/abstract_client_handler.py": {
            "docstring": "Base class for all API client handlers"
        },
        "scrutiny/server/device/links/abstract_link.py": {
            "docstring": "Base class for all device communication link (serial, udp, other)"
        },
        "scrutiny/server/device/request_generator/memory_reader.py": {
            "docstring": "Synchronize the datastore with the device\nPoll for entries that are watched and update the datastore with data read from the device. "
        },
        "test/server/test_memory_reader.py": {
            "docstring": "Make sure the memory_Reader correctly reads the device memory to fills the datastore entries that are watch"
        },
        "scrutiny/server/device/request_generator/memory_writer.py": {
            "docstring": "Synchronize the datastore with the device\nPoll for entries that are watched and update the device with value change request coming from the user in the datastore."
        },
        "test/core/test_variables.py": {
            "docstring": "Test the behavior of variable manipulation tools"
        },
        "test/server/test_memory_writer.py": {
            "docstring": "Test the bridge between the data store and the device memory (datastore to memory direction only)"
        },
        "scrutiny/cli/commands/list_sfd.py": {
            "docstring": "Print a list of all installed Scrutiny Firmware Description files (SFD) installed on this system"
        },
        "scrutiny/server/active_sfd_handler.py": {
            "docstring": "Manage the loaded SFD file with which the client will interracts."
        },
        "test/server/test_active_sfd_handler.py": {
            "docstring": "Test the ActiveSFDHandler"
        },
        "scrutiny/cli/commands/launch_gui.py": {
            "docstring": "CLI command to launch the Graphical User Interface"
        },
        "scrutiny/gui/ext2contenttype.py": {
            "docstring": "Maps file extension to their respective HTTP Content-Type header"
        },
        "scrutiny/gui/gui_client.py": {
            "docstring": "Represent the GUI application. Allows to launch through Chromium Embedded Framework or in a web browser with local server"
        },
        "scrutiny/gui/scrutiny_gui_http_server.py": {
            "docstring": "Local web server for serving the local GUI in a browser"
        },
        "scrutiny/server/api/message_definitions.py": {
            "docstring": "Static type definition of the API messages"
        },
        "scrutiny/exceptions.py": {
            "docstring": "Some exceptions specific to this module"
        },
        "test/server/links/test_dummy_link.py": {
            "docstring": "Make sure that dummy links transfer data and that global channels works (to simulate switching of channels)"
        },
        "test/server/links/test_serial_link.py": {
            "docstring": "Test serial port link. Require an external serial loopback.\nMake the link object talk with a serial port."
        },
        "test/server/links/test_udp_link.py": {
            "docstring": "Test UDP link.\nnMake the link object talk with a socket"
        },
        "scrutiny/server/device/links/serial_link.py": {
            "docstring": "Represent a Serial Link that can be used to communicate with a device"
        },
        "test/core/test_types.py": {
            "docstring": "Make some checks on Scrutiny basic types used project wide"
        },
        "scrutiny/core/codecs.py": {
            "docstring": "Contains classes capable to encode/decode data exchanged with embedded side"
        },
        "scrutiny/core/basic_types.py": {
            "docstring": "Contains the basic types used project-wides"
        },
        "scrutiny/server/protocol/typing.py": {
            "docstring": "Mypy typing information for the Scrutiny protocol"
        }
    }
}
